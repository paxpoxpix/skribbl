app Scribbl {
  wasp: {
    version: "^0.11.4"
  },
  title: "Scribbl",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int     @id @default(autoincrement())
    username String  @unique
    password String
    email    String  @unique
    settings String
    boards   Board[]
psl=}

entity Board {=psl
    id       Int       @id @default(autoincrement())
    name     String
    isPublic Boolean   @default(false)
    link     String    @unique
    contents String
    objects  Object[]
    user     User      @relation(fields: [userId], references: [id])
    userId   Int
    history  History[]
psl=}

entity Object {=psl
    id       Int    @id @default(autoincrement())
    type     String
    position String
    content  String
    board    Board  @relation(fields: [boardId], references: [id])
    boardId  Int
psl=}

entity History {=psl
    id        Int      @id @default(autoincrement())
    snapshot  String
    timestamp DateTime @default(now())
    board     Board    @relation(fields: [boardId], references: [id])
    boardId   Int
psl=}

action createBoard {
  fn: import { createBoard } from "@server/actions.js",
  entities: [User, Board]
}

action updateBoard {
  fn: import { updateBoard } from "@server/actions.js",
  entities: [User, Board]
}

action deleteBoard {
  fn: import { deleteBoard } from "@server/actions.js",
  entities: [User, Board]
}

action createObject {
  fn: import { createObject } from "@server/actions.js",
  entities: [User, Board, Object]
}

action updateObject {
  fn: import { updateObject } from "@server/actions.js",
  entities: [User, Board, Object]
}

action deleteObject {
  fn: import { deleteObject } from "@server/actions.js",
  entities: [User, Board, Object]
}

action createSnapshot {
  fn: import { createSnapshot } from "@server/actions.js",
  entities: [User, Board, History]
}

action revertSnapshot {
  fn: import { revertSnapshot } from "@server/actions.js",
  entities: [User, Board, History]
}

query getBoards {
  fn: import { getBoards } from "@server/queries.js",
  entities: [User, Board]
}

query getBoard {
  fn: import { getBoard } from "@server/queries.js",
  entities: [User, Board]
}

query getObjects {
  fn: import { getObjects } from "@server/queries.js",
  entities: [User, Board, Object]
}

query getHistory {
  fn: import { getHistory } from "@server/queries.js",
  entities: [User, Board, History]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/DashboardPage.jsx",
  authRequired: true
}

route BoardRoute { path: "/board/:boardId", to: BoardPage }
page BoardPage {
  component: import { Board } from "@client/pages/Board.jsx",
  authRequired: true
}